- name: DEBUG createvm
  ansible.builtin.debug:
    var: createvm
  when: createvm_debug is true

- name: Linked clone vm {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "{{ createvm.cluster }}"
    template: "{{ createvm.template }}"
    template_version: "{{ createvm.template_version }}"
    name: "{{ createvm.name }}"
    state: present
    clone: false
    wait: true
  when: createvm.clone is false

- name: Full clone vm {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "{{ createvm.cluster }}"
    template: "{{ createvm.template }}"
    template_version: "{{ createvm.template_version }}"
    name: "{{ createvm.name }}"
    state: present
    clone: true
    storage_domain: "{{ createvm.storage_domain | default(omit) }}"
    disk_format: "{{ createvm.disk_format | default(createvm_default.disk_format) }}"
    wait: true
  when:
    - createvm.clone is true or
      createvm.clone is undefined

- name: Set vm {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "{{ createvm.cluster }}"
    name: "{{ createvm.name }}"
    comment: "{{ createvm.comment }}"
    description: "{{ createvm.description }}"
    cpu_cores: "{{ createvm.cpu_cores }}"
    cpu_sockets: 1
    nics: "{{ createvm.nics }}"
    timezone: "{{ createvm.timezone }}"
    operating_system: "{{ createvm.operating_system }}"
    type: server

- name: Set vm memory {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "{{ createvm.cluster }}"
    name: "{{ createvm.name }}"
    memory_max: "{{ createvm.memory }}"
    memory_guaranteed: "{{ createvm.memory }}"
    memory: "{{ createvm.memory }}"

- name: Get disk info {{ createvm.name }}
  ovirt.ovirt.ovirt_vm_info:
    auth: "{{ ovirt_auth }}"
    pattern: name="{{ createvm.name }}" cluster="{{ createvm.cluster }}"
    follow: diskattachments
    all_content: true
  register: vminfo

- name: Change disk name {{ createvm.name }}
  ovirt.ovirt.ovirt_disk:
    auth: "{{ ovirt_auth }}"
    id: "{{ bootdisk[0]['disk']['id'] }}"
    vm_id: "{{ bootdisk[0]['vm']['id'] }}"
    name: "{{ createvm.name }}-disk1"
  vars:
    bootdisk: "{{ vminfo.ovirt_vms[0]['disk_attachments'] | selectattr('bootable', 'true') }}"

- name: Change disk size {{ createvm.name }}
  ovirt.ovirt.ovirt_disk:
    auth: "{{ ovirt_auth }}"
    id: "{{ bootdisk[0]['disk']['id'] }}"
    vm_id: "{{ bootdisk[0]['vm']['id'] }}"
    size: "{{ createvm.disksize }}"
  vars:
    bootdisk: "{{ vminfo.ovirt_vms[0]['disk_attachments'] | selectattr('bootable', 'true') }}"
  ignore_errors: true

- name: Attach tags {{ createvm.name }}
  ovirt.ovirt.ovirt_tag:
    auth: "{{ ovirt_auth }}"
    name: "{{ tag }}"
    vms: "{{ createvm.name }}"
    state: attached
  loop: "{{ createvm.tags }}"
  loop_control:
    loop_var: tag
  when:
    - tag is defined
    - tag != ''
    - tag not in createvmzvirt_emptytags

- name: Set vm cloud-init {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "{{ createvm.cluster }}"
    name: "{{ createvm.name }}"
    cloud_init_persist: true
    cloud_init:
      host_name: "{{ createvm.ci.hostname }}"
      user_name: "{{ createvm.ci.username }}"
      root_password: "{{ createvm.ci.userpass }}"
      authorized_ssh_keys: "{{ createvm.ci.pubkey }}"
      custom_script: "{{ createvm.ci.customscript | default(omit) }}"
      nic_name: "{{ createvm.ci.nic_name | default('eth0') }}"
      nic_boot_protocol: "{{ createvm.ci.nic_boot_protocol | default('dhcp') }}"
      nic_ip_address: "{{ createvm.ci.ipv4_address | default(omit) }}"
      nic_netmask: "{{ createvm.ci.ipv4_netmask | default(omit) }}"
      nic_gateway: "{{ createvm.ci.ipv4_gateway | default(omit) }}"
      dns_servers: "{{ (createvm.ci.dns_servers | default(omit)) | join(' ') }}"
      dns_search: "{{ createvm.ci.dns_search | default(omit) }}"
  when: createvm.initialrun != 'sysprep' or createvm.initialrun is undefined

- name: Get NIC info
  ovirt.ovirt.ovirt_nic_info:
    auth: "{{ ovirt_auth }}"
    vm: "{{ createvm.name }}"
    name: "{{ createvm.nics[0].name }}"
  register: result

- ansible.builtin.set_fact:
    createvm_mac: "{{ result.ovirt_nics[0].mac.address | replace(':','-')}}"

- name: DEBUG createvm_mac
  ansible.builtin.debug:
    var: createvm_mac
  when: createvm_debug is true

- name: Set vm sysprep {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    cluster: "{{ createvm.cluster }}"
    name: "{{ createvm.name }}"
    cloud_init_persist: true
    sysprep:
      # active_directory_ou: 
      # domain: 
      # windows_license_key: 
      # input_locale: en-US
      # system_locale: ru-RU
      # ui_language: en-US
      # timezone: Russian standard time
      # org_name: "{{ project.name }}"
      # host_name: "{{ createvm.ci.hostname }}"
      # user_name: "{{ createvm.ci.username }}"
      # root_password: "{{ createvm.ci.userpass }}"
      custom_script: "{{ lookup('template', 'sysprep.xml') }}"
  when: createvm.initialrun == 'sysprep'

- name: Start VM {{ createvm.name }}
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    name: "{{ createvm.name }}"
    state: running
    wait: "{{ createvm.waitstart }}"
  when: createvm.startvm is true
  ignore_errors: true
